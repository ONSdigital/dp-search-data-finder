// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-search-data-finder/config"
	"github.com/ONSdigital/dp-search-data-finder/event"
	"github.com/ONSdigital/dp-search-data-finder/models"
	"sync"
)

// Ensure, that ContentUpdaterMock does implement event.ContentUpdater.
// If this is not the case, regenerate this file with moq.
var _ event.ContentUpdater = &ContentUpdaterMock{}

// ContentUpdaterMock is a mock implementation of event.ContentUpdater.
//
//	func TestSomethingThatUsesContentUpdater(t *testing.T) {
//
//		// make and configure a mocked event.ContentUpdater
//		mockedContentUpdater := &ContentUpdaterMock{
//			ContentUpdateFunc: func(ctx context.Context, cfg *config.Config, event models.ContentUpdated) error {
//				panic("mock out the ContentUpdate method")
//			},
//		}
//
//		// use mockedContentUpdater in code that requires event.ContentUpdater
//		// and then make assertions.
//
//	}
type ContentUpdaterMock struct {
	// ContentUpdateFunc mocks the ContentUpdate method.
	ContentUpdateFunc func(ctx context.Context, cfg *config.Config, event models.ContentUpdated) error

	// calls tracks calls to the methods.
	calls struct {
		// ContentUpdate holds details about calls to the ContentUpdate method.
		ContentUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg *config.Config
			// Event is the event argument value.
			Event models.ContentUpdated
		}
	}
	lockContentUpdate sync.RWMutex
}

// ContentUpdate calls ContentUpdateFunc.
func (mock *ContentUpdaterMock) ContentUpdate(ctx context.Context, cfg *config.Config, event models.ContentUpdated) error {
	if mock.ContentUpdateFunc == nil {
		panic("ContentUpdaterMock.ContentUpdateFunc: method is nil but ContentUpdater.ContentUpdate was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Cfg   *config.Config
		Event models.ContentUpdated
	}{
		Ctx:   ctx,
		Cfg:   cfg,
		Event: event,
	}
	mock.lockContentUpdate.Lock()
	mock.calls.ContentUpdate = append(mock.calls.ContentUpdate, callInfo)
	mock.lockContentUpdate.Unlock()
	return mock.ContentUpdateFunc(ctx, cfg, event)
}

// ContentUpdateCalls gets all the calls that were made to ContentUpdate.
// Check the length with:
//
//	len(mockedContentUpdater.ContentUpdateCalls())
func (mock *ContentUpdaterMock) ContentUpdateCalls() []struct {
	Ctx   context.Context
	Cfg   *config.Config
	Event models.ContentUpdated
} {
	var calls []struct {
		Ctx   context.Context
		Cfg   *config.Config
		Event models.ContentUpdated
	}
	mock.lockContentUpdate.RLock()
	calls = mock.calls.ContentUpdate
	mock.lockContentUpdate.RUnlock()
	return calls
}
