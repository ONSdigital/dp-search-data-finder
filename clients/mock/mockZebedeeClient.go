// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	zebedeeclient "github.com/ONSdigital/dp-api-clients-go/v2/zebedee"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-search-data-finder/clients"
	"sync"
)

// Ensure, that ZebedeeClientMock does implement clients.ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ clients.ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of clients.ZebedeeClient.
//
// 	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
// 		// make and configure a mocked clients.ZebedeeClient
// 		mockedZebedeeClient := &ZebedeeClientMock{
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetPublishedIndexFunc: func(ctx context.Context, publishedIndexRequestParams *zebedeeclient.PublishedIndexRequestParams) (zebedeeclient.PublishedIndex, error) {
// 				panic("mock out the GetPublishedIndex method")
// 			},
// 		}
//
// 		// use mockedZebedeeClient in code that requires clients.ZebedeeClient
// 		// and then make assertions.
//
// 	}
type ZebedeeClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// GetPublishedIndexFunc mocks the GetPublishedIndex method.
	GetPublishedIndexFunc func(ctx context.Context, publishedIndexRequestParams *zebedeeclient.PublishedIndexRequestParams) (zebedeeclient.PublishedIndex, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// GetPublishedIndex holds details about calls to the GetPublishedIndex method.
		GetPublishedIndex []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PublishedIndexRequestParams is the publishedIndexRequestParams argument value.
			PublishedIndexRequestParams *zebedeeclient.PublishedIndexRequestParams
		}
	}
	lockChecker           sync.RWMutex
	lockGetPublishedIndex sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ZebedeeClientMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ZebedeeClientMock.CheckerFunc: method is nil but ZebedeeClient.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedZebedeeClient.CheckerCalls())
func (mock *ZebedeeClientMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetPublishedIndex calls GetPublishedIndexFunc.
func (mock *ZebedeeClientMock) GetPublishedIndex(ctx context.Context, publishedIndexRequestParams *zebedeeclient.PublishedIndexRequestParams) (zebedeeclient.PublishedIndex, error) {
	if mock.GetPublishedIndexFunc == nil {
		panic("ZebedeeClientMock.GetPublishedIndexFunc: method is nil but ZebedeeClient.GetPublishedIndex was just called")
	}
	callInfo := struct {
		Ctx                         context.Context
		PublishedIndexRequestParams *zebedeeclient.PublishedIndexRequestParams
	}{
		Ctx:                         ctx,
		PublishedIndexRequestParams: publishedIndexRequestParams,
	}
	mock.lockGetPublishedIndex.Lock()
	mock.calls.GetPublishedIndex = append(mock.calls.GetPublishedIndex, callInfo)
	mock.lockGetPublishedIndex.Unlock()
	return mock.GetPublishedIndexFunc(ctx, publishedIndexRequestParams)
}

// GetPublishedIndexCalls gets all the calls that were made to GetPublishedIndex.
// Check the length with:
//     len(mockedZebedeeClient.GetPublishedIndexCalls())
func (mock *ZebedeeClientMock) GetPublishedIndexCalls() []struct {
	Ctx                         context.Context
	PublishedIndexRequestParams *zebedeeclient.PublishedIndexRequestParams
} {
	var calls []struct {
		Ctx                         context.Context
		PublishedIndexRequestParams *zebedeeclient.PublishedIndexRequestParams
	}
	mock.lockGetPublishedIndex.RLock()
	calls = mock.calls.GetPublishedIndex
	mock.lockGetPublishedIndex.RUnlock()
	return calls
}
