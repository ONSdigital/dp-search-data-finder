// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/health"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-search-data-finder/clients"
	searchReindex "github.com/ONSdigital/dp-search-reindex-api/models"
	searchReindexSDK "github.com/ONSdigital/dp-search-reindex-api/sdk"
	"sync"
)

// Ensure, that SearchReindexClientMock does implement clients.SearchReindexClient.
// If this is not the case, regenerate this file with moq.
var _ clients.SearchReindexClient = &SearchReindexClientMock{}

// SearchReindexClientMock is a mock implementation of clients.SearchReindexClient.
//
// 	func TestSomethingThatUsesSearchReindexClient(t *testing.T) {
//
// 		// make and configure a mocked clients.SearchReindexClient
// 		mockedSearchReindexClient := &SearchReindexClientMock{
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetTaskFunc: func(ctx context.Context, headers searchReindexSDK.Headers, jobID string, taskName string) (*searchReindexSDK.RespHeaders, *searchReindex.Task, error) {
// 				panic("mock out the GetTask method")
// 			},
// 			HealthFunc: func() *health.Client {
// 				panic("mock out the Health method")
// 			},
// 			PatchJobFunc: func(contextMoqParam context.Context, headers searchReindexSDK.Headers, s string, patchOperations []searchReindexSDK.PatchOperation) (*searchReindexSDK.RespHeaders, error) {
// 				panic("mock out the PatchJob method")
// 			},
// 			PostJobFunc: func(contextMoqParam context.Context, headers searchReindexSDK.Headers) (*searchReindex.Job, error) {
// 				panic("mock out the PostJob method")
// 			},
// 			PostTasksCountFunc: func(ctx context.Context, headers searchReindexSDK.Headers, jobID string, payload []byte) (*searchReindexSDK.RespHeaders, *searchReindex.Task, error) {
// 				panic("mock out the PostTasksCount method")
// 			},
// 			URLFunc: func() string {
// 				panic("mock out the URL method")
// 			},
// 		}
//
// 		// use mockedSearchReindexClient in code that requires clients.SearchReindexClient
// 		// and then make assertions.
//
// 	}
type SearchReindexClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// GetTaskFunc mocks the GetTask method.
	GetTaskFunc func(ctx context.Context, headers searchReindexSDK.Headers, jobID string, taskName string) (*searchReindexSDK.RespHeaders, *searchReindex.Task, error)

	// HealthFunc mocks the Health method.
	HealthFunc func() *health.Client

	// PatchJobFunc mocks the PatchJob method.
	PatchJobFunc func(contextMoqParam context.Context, headers searchReindexSDK.Headers, s string, patchOperations []searchReindexSDK.PatchOperation) (*searchReindexSDK.RespHeaders, error)

	// PostJobFunc mocks the PostJob method.
	PostJobFunc func(contextMoqParam context.Context, headers searchReindexSDK.Headers) (*searchReindex.Job, error)

	// PostTasksCountFunc mocks the PostTasksCount method.
	PostTasksCountFunc func(ctx context.Context, headers searchReindexSDK.Headers, jobID string, payload []byte) (*searchReindexSDK.RespHeaders, *searchReindex.Task, error)

	// URLFunc mocks the URL method.
	URLFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// GetTask holds details about calls to the GetTask method.
		GetTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers searchReindexSDK.Headers
			// JobID is the jobID argument value.
			JobID string
			// TaskName is the taskName argument value.
			TaskName string
		}
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// PatchJob holds details about calls to the PatchJob method.
		PatchJob []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Headers is the headers argument value.
			Headers searchReindexSDK.Headers
			// S is the s argument value.
			S string
			// PatchOperations is the patchOperations argument value.
			PatchOperations []searchReindexSDK.PatchOperation
		}
		// PostJob holds details about calls to the PostJob method.
		PostJob []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Headers is the headers argument value.
			Headers searchReindexSDK.Headers
		}
		// PostTasksCount holds details about calls to the PostTasksCount method.
		PostTasksCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Headers is the headers argument value.
			Headers searchReindexSDK.Headers
			// JobID is the jobID argument value.
			JobID string
			// Payload is the payload argument value.
			Payload []byte
		}
		// URL holds details about calls to the URL method.
		URL []struct {
		}
	}
	lockChecker        sync.RWMutex
	lockGetTask        sync.RWMutex
	lockHealth         sync.RWMutex
	lockPatchJob       sync.RWMutex
	lockPostJob        sync.RWMutex
	lockPostTasksCount sync.RWMutex
	lockURL            sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *SearchReindexClientMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("SearchReindexClientMock.CheckerFunc: method is nil but SearchReindexClient.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedSearchReindexClient.CheckerCalls())
func (mock *SearchReindexClientMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetTask calls GetTaskFunc.
func (mock *SearchReindexClientMock) GetTask(ctx context.Context, headers searchReindexSDK.Headers, jobID string, taskName string) (*searchReindexSDK.RespHeaders, *searchReindex.Task, error) {
	if mock.GetTaskFunc == nil {
		panic("SearchReindexClientMock.GetTaskFunc: method is nil but SearchReindexClient.GetTask was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Headers  searchReindexSDK.Headers
		JobID    string
		TaskName string
	}{
		Ctx:      ctx,
		Headers:  headers,
		JobID:    jobID,
		TaskName: taskName,
	}
	mock.lockGetTask.Lock()
	mock.calls.GetTask = append(mock.calls.GetTask, callInfo)
	mock.lockGetTask.Unlock()
	return mock.GetTaskFunc(ctx, headers, jobID, taskName)
}

// GetTaskCalls gets all the calls that were made to GetTask.
// Check the length with:
//     len(mockedSearchReindexClient.GetTaskCalls())
func (mock *SearchReindexClientMock) GetTaskCalls() []struct {
	Ctx      context.Context
	Headers  searchReindexSDK.Headers
	JobID    string
	TaskName string
} {
	var calls []struct {
		Ctx      context.Context
		Headers  searchReindexSDK.Headers
		JobID    string
		TaskName string
	}
	mock.lockGetTask.RLock()
	calls = mock.calls.GetTask
	mock.lockGetTask.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *SearchReindexClientMock) Health() *health.Client {
	if mock.HealthFunc == nil {
		panic("SearchReindexClientMock.HealthFunc: method is nil but SearchReindexClient.Health was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//     len(mockedSearchReindexClient.HealthCalls())
func (mock *SearchReindexClientMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// PatchJob calls PatchJobFunc.
func (mock *SearchReindexClientMock) PatchJob(contextMoqParam context.Context, headers searchReindexSDK.Headers, s string, patchOperations []searchReindexSDK.PatchOperation) (*searchReindexSDK.RespHeaders, error) {
	if mock.PatchJobFunc == nil {
		panic("SearchReindexClientMock.PatchJobFunc: method is nil but SearchReindexClient.PatchJob was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Headers         searchReindexSDK.Headers
		S               string
		PatchOperations []searchReindexSDK.PatchOperation
	}{
		ContextMoqParam: contextMoqParam,
		Headers:         headers,
		S:               s,
		PatchOperations: patchOperations,
	}
	mock.lockPatchJob.Lock()
	mock.calls.PatchJob = append(mock.calls.PatchJob, callInfo)
	mock.lockPatchJob.Unlock()
	return mock.PatchJobFunc(contextMoqParam, headers, s, patchOperations)
}

// PatchJobCalls gets all the calls that were made to PatchJob.
// Check the length with:
//     len(mockedSearchReindexClient.PatchJobCalls())
func (mock *SearchReindexClientMock) PatchJobCalls() []struct {
	ContextMoqParam context.Context
	Headers         searchReindexSDK.Headers
	S               string
	PatchOperations []searchReindexSDK.PatchOperation
} {
	var calls []struct {
		ContextMoqParam context.Context
		Headers         searchReindexSDK.Headers
		S               string
		PatchOperations []searchReindexSDK.PatchOperation
	}
	mock.lockPatchJob.RLock()
	calls = mock.calls.PatchJob
	mock.lockPatchJob.RUnlock()
	return calls
}

// PostJob calls PostJobFunc.
func (mock *SearchReindexClientMock) PostJob(contextMoqParam context.Context, headers searchReindexSDK.Headers) (*searchReindex.Job, error) {
	if mock.PostJobFunc == nil {
		panic("SearchReindexClientMock.PostJobFunc: method is nil but SearchReindexClient.PostJob was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Headers         searchReindexSDK.Headers
	}{
		ContextMoqParam: contextMoqParam,
		Headers:         headers,
	}
	mock.lockPostJob.Lock()
	mock.calls.PostJob = append(mock.calls.PostJob, callInfo)
	mock.lockPostJob.Unlock()
	return mock.PostJobFunc(contextMoqParam, headers)
}

// PostJobCalls gets all the calls that were made to PostJob.
// Check the length with:
//     len(mockedSearchReindexClient.PostJobCalls())
func (mock *SearchReindexClientMock) PostJobCalls() []struct {
	ContextMoqParam context.Context
	Headers         searchReindexSDK.Headers
} {
	var calls []struct {
		ContextMoqParam context.Context
		Headers         searchReindexSDK.Headers
	}
	mock.lockPostJob.RLock()
	calls = mock.calls.PostJob
	mock.lockPostJob.RUnlock()
	return calls
}

// PostTasksCount calls PostTasksCountFunc.
func (mock *SearchReindexClientMock) PostTasksCount(ctx context.Context, headers searchReindexSDK.Headers, jobID string, payload []byte) (*searchReindexSDK.RespHeaders, *searchReindex.Task, error) {
	if mock.PostTasksCountFunc == nil {
		panic("SearchReindexClientMock.PostTasksCountFunc: method is nil but SearchReindexClient.PostTasksCount was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Headers searchReindexSDK.Headers
		JobID   string
		Payload []byte
	}{
		Ctx:     ctx,
		Headers: headers,
		JobID:   jobID,
		Payload: payload,
	}
	mock.lockPostTasksCount.Lock()
	mock.calls.PostTasksCount = append(mock.calls.PostTasksCount, callInfo)
	mock.lockPostTasksCount.Unlock()
	return mock.PostTasksCountFunc(ctx, headers, jobID, payload)
}

// PostTasksCountCalls gets all the calls that were made to PostTasksCount.
// Check the length with:
//     len(mockedSearchReindexClient.PostTasksCountCalls())
func (mock *SearchReindexClientMock) PostTasksCountCalls() []struct {
	Ctx     context.Context
	Headers searchReindexSDK.Headers
	JobID   string
	Payload []byte
} {
	var calls []struct {
		Ctx     context.Context
		Headers searchReindexSDK.Headers
		JobID   string
		Payload []byte
	}
	mock.lockPostTasksCount.RLock()
	calls = mock.calls.PostTasksCount
	mock.lockPostTasksCount.RUnlock()
	return calls
}

// URL calls URLFunc.
func (mock *SearchReindexClientMock) URL() string {
	if mock.URLFunc == nil {
		panic("SearchReindexClientMock.URLFunc: method is nil but SearchReindexClient.URL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockURL.Lock()
	mock.calls.URL = append(mock.calls.URL, callInfo)
	mock.lockURL.Unlock()
	return mock.URLFunc()
}

// URLCalls gets all the calls that were made to URL.
// Check the length with:
//     len(mockedSearchReindexClient.URLCalls())
func (mock *SearchReindexClientMock) URLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockURL.RLock()
	calls = mock.calls.URL
	mock.lockURL.RUnlock()
	return calls
}
